// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"segment_public_api/internal/sdk/pkg/models/shared"
)

// ListLabelsLabelsResponse200ResponseBody - OK
type ListLabelsLabelsResponse200ResponseBody struct {
	// Returns all available labels for the current Workspace.
	Data *shared.ListLabelsV1Output `json:"data,omitempty"`
}

func (o *ListLabelsLabelsResponse200ResponseBody) GetData() *shared.ListLabelsV1Output {
	if o == nil {
		return nil
	}
	return o.Data
}

// ListLabelsLabelsResponseResponseBody - OK
type ListLabelsLabelsResponseResponseBody struct {
	// Returns all available labels for the current Workspace.
	Data *shared.ListLabelsAlphaOutput `json:"data,omitempty"`
}

func (o *ListLabelsLabelsResponseResponseBody) GetData() *shared.ListLabelsAlphaOutput {
	if o == nil {
		return nil
	}
	return o.Data
}

// ListLabelsLabelsResponseBody - OK
type ListLabelsLabelsResponseBody struct {
	// Returns all available labels for the current Workspace.
	Data *shared.ListLabelsV1Output `json:"data,omitempty"`
}

func (o *ListLabelsLabelsResponseBody) GetData() *shared.ListLabelsV1Output {
	if o == nil {
		return nil
	}
	return o.Data
}

// ListLabelsResponseBody - OK
type ListLabelsResponseBody struct {
	// Returns all available labels for the current Workspace.
	Data *shared.ListLabelsV1Output `json:"data,omitempty"`
}

func (o *ListLabelsResponseBody) GetData() *shared.ListLabelsV1Output {
	if o == nil {
		return nil
	}
	return o.Data
}

type ListLabelsResponse struct {
	// OK
	TwoHundredApplicationJSONObject *ListLabelsResponseBody
	// OK
	TwoHundredApplicationVndSegmentV1PlusJSONObject *ListLabelsLabelsResponseBody
	// OK
	TwoHundredApplicationVndSegmentV1alphaPlusJSONObject *ListLabelsLabelsResponseResponseBody
	// OK
	TwoHundredApplicationVndSegmentV1betaPlusJSONObject *ListLabelsLabelsResponse200ResponseBody
	// HTTP response content type for this operation
	ContentType string
	// Resource not found
	RequestErrorEnvelope *shared.RequestErrorEnvelope
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListLabelsResponse) GetTwoHundredApplicationJSONObject() *ListLabelsResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *ListLabelsResponse) GetTwoHundredApplicationVndSegmentV1PlusJSONObject() *ListLabelsLabelsResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationVndSegmentV1PlusJSONObject
}

func (o *ListLabelsResponse) GetTwoHundredApplicationVndSegmentV1alphaPlusJSONObject() *ListLabelsLabelsResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationVndSegmentV1alphaPlusJSONObject
}

func (o *ListLabelsResponse) GetTwoHundredApplicationVndSegmentV1betaPlusJSONObject() *ListLabelsLabelsResponse200ResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationVndSegmentV1betaPlusJSONObject
}

func (o *ListLabelsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListLabelsResponse) GetRequestErrorEnvelope() *shared.RequestErrorEnvelope {
	if o == nil {
		return nil
	}
	return o.RequestErrorEnvelope
}

func (o *ListLabelsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListLabelsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
