// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"segment_public_api/internal/sdk/pkg/models/shared"
)

type ListUserGroupsFromUserRequest struct {
	// Pagination for groups.
	//
	// This parameter exists in v1.
	Pagination shared.PaginationInput `queryParam:"style=deepObject,explode=true,name=pagination"`
	UserID     string                 `pathParam:"style=simple,explode=false,name=userId"`
}

func (o *ListUserGroupsFromUserRequest) GetPagination() shared.PaginationInput {
	if o == nil {
		return shared.PaginationInput{}
	}
	return o.Pagination
}

func (o *ListUserGroupsFromUserRequest) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// ListUserGroupsFromUserIAMUsersResponse200ResponseBody - OK
type ListUserGroupsFromUserIAMUsersResponse200ResponseBody struct {
	// Returns all user groups the user belongs to.
	Data *shared.ListUserGroupsFromUserV1Output `json:"data,omitempty"`
}

func (o *ListUserGroupsFromUserIAMUsersResponse200ResponseBody) GetData() *shared.ListUserGroupsFromUserV1Output {
	if o == nil {
		return nil
	}
	return o.Data
}

// ListUserGroupsFromUserIAMUsersResponseResponseBody - OK
type ListUserGroupsFromUserIAMUsersResponseResponseBody struct {
	// Returns all user groups the user belongs to.
	Data *shared.ListUserGroupsFromUserV1Output `json:"data,omitempty"`
}

func (o *ListUserGroupsFromUserIAMUsersResponseResponseBody) GetData() *shared.ListUserGroupsFromUserV1Output {
	if o == nil {
		return nil
	}
	return o.Data
}

// ListUserGroupsFromUserIAMUsersResponseBody - OK
type ListUserGroupsFromUserIAMUsersResponseBody struct {
	// Returns all user groups the user belongs to.
	Data *shared.ListUserGroupsFromUserV1Output `json:"data,omitempty"`
}

func (o *ListUserGroupsFromUserIAMUsersResponseBody) GetData() *shared.ListUserGroupsFromUserV1Output {
	if o == nil {
		return nil
	}
	return o.Data
}

// ListUserGroupsFromUserResponseBody - OK
type ListUserGroupsFromUserResponseBody struct {
	// Returns all user groups the user belongs to.
	Data *shared.ListUserGroupsFromUserV1Output `json:"data,omitempty"`
}

func (o *ListUserGroupsFromUserResponseBody) GetData() *shared.ListUserGroupsFromUserV1Output {
	if o == nil {
		return nil
	}
	return o.Data
}

type ListUserGroupsFromUserResponse struct {
	// OK
	TwoHundredApplicationJSONObject *ListUserGroupsFromUserResponseBody
	// OK
	TwoHundredApplicationVndSegmentV1PlusJSONObject *ListUserGroupsFromUserIAMUsersResponseBody
	// OK
	TwoHundredApplicationVndSegmentV1alphaPlusJSONObject *ListUserGroupsFromUserIAMUsersResponseResponseBody
	// OK
	TwoHundredApplicationVndSegmentV1betaPlusJSONObject *ListUserGroupsFromUserIAMUsersResponse200ResponseBody
	// HTTP response content type for this operation
	ContentType string
	// Resource not found
	RequestErrorEnvelope *shared.RequestErrorEnvelope
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *ListUserGroupsFromUserResponse) GetTwoHundredApplicationJSONObject() *ListUserGroupsFromUserResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *ListUserGroupsFromUserResponse) GetTwoHundredApplicationVndSegmentV1PlusJSONObject() *ListUserGroupsFromUserIAMUsersResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationVndSegmentV1PlusJSONObject
}

func (o *ListUserGroupsFromUserResponse) GetTwoHundredApplicationVndSegmentV1alphaPlusJSONObject() *ListUserGroupsFromUserIAMUsersResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationVndSegmentV1alphaPlusJSONObject
}

func (o *ListUserGroupsFromUserResponse) GetTwoHundredApplicationVndSegmentV1betaPlusJSONObject() *ListUserGroupsFromUserIAMUsersResponse200ResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationVndSegmentV1betaPlusJSONObject
}

func (o *ListUserGroupsFromUserResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListUserGroupsFromUserResponse) GetRequestErrorEnvelope() *shared.RequestErrorEnvelope {
	if o == nil {
		return nil
	}
	return o.RequestErrorEnvelope
}

func (o *ListUserGroupsFromUserResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListUserGroupsFromUserResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
