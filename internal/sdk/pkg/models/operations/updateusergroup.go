// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"segment_public_api/internal/sdk/pkg/models/shared"
)

type UpdateUserGroupRequest struct {
	UpdateUserGroupV1Input shared.UpdateUserGroupV1Input `request:"mediaType=application/vnd.segment.v1beta+json"`
	UserGroupID            string                        `pathParam:"style=simple,explode=false,name=userGroupId"`
}

func (o *UpdateUserGroupRequest) GetUpdateUserGroupV1Input() shared.UpdateUserGroupV1Input {
	if o == nil {
		return shared.UpdateUserGroupV1Input{}
	}
	return o.UpdateUserGroupV1Input
}

func (o *UpdateUserGroupRequest) GetUserGroupID() string {
	if o == nil {
		return ""
	}
	return o.UserGroupID
}

// UpdateUserGroupIAMGroupsResponse200ResponseBody - OK
type UpdateUserGroupIAMGroupsResponse200ResponseBody struct {
	// Returns the updated user group.
	Data *shared.UpdateUserGroupV1Output `json:"data,omitempty"`
}

func (o *UpdateUserGroupIAMGroupsResponse200ResponseBody) GetData() *shared.UpdateUserGroupV1Output {
	if o == nil {
		return nil
	}
	return o.Data
}

// UpdateUserGroupIAMGroupsResponseResponseBody - OK
type UpdateUserGroupIAMGroupsResponseResponseBody struct {
	// Returns the updated user group.
	Data *shared.UpdateUserGroupV1Output `json:"data,omitempty"`
}

func (o *UpdateUserGroupIAMGroupsResponseResponseBody) GetData() *shared.UpdateUserGroupV1Output {
	if o == nil {
		return nil
	}
	return o.Data
}

// UpdateUserGroupIAMGroupsResponseBody - OK
type UpdateUserGroupIAMGroupsResponseBody struct {
	// Returns the updated user group.
	Data *shared.UpdateUserGroupV1Output `json:"data,omitempty"`
}

func (o *UpdateUserGroupIAMGroupsResponseBody) GetData() *shared.UpdateUserGroupV1Output {
	if o == nil {
		return nil
	}
	return o.Data
}

// UpdateUserGroupResponseBody - OK
type UpdateUserGroupResponseBody struct {
	// Returns the updated user group.
	Data *shared.UpdateUserGroupV1Output `json:"data,omitempty"`
}

func (o *UpdateUserGroupResponseBody) GetData() *shared.UpdateUserGroupV1Output {
	if o == nil {
		return nil
	}
	return o.Data
}

type UpdateUserGroupResponse struct {
	// OK
	TwoHundredApplicationJSONObject *UpdateUserGroupResponseBody
	// OK
	TwoHundredApplicationVndSegmentV1PlusJSONObject *UpdateUserGroupIAMGroupsResponseBody
	// OK
	TwoHundredApplicationVndSegmentV1alphaPlusJSONObject *UpdateUserGroupIAMGroupsResponseResponseBody
	// OK
	TwoHundredApplicationVndSegmentV1betaPlusJSONObject *UpdateUserGroupIAMGroupsResponse200ResponseBody
	// HTTP response content type for this operation
	ContentType string
	// Resource not found
	RequestErrorEnvelope *shared.RequestErrorEnvelope
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *UpdateUserGroupResponse) GetTwoHundredApplicationJSONObject() *UpdateUserGroupResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *UpdateUserGroupResponse) GetTwoHundredApplicationVndSegmentV1PlusJSONObject() *UpdateUserGroupIAMGroupsResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationVndSegmentV1PlusJSONObject
}

func (o *UpdateUserGroupResponse) GetTwoHundredApplicationVndSegmentV1alphaPlusJSONObject() *UpdateUserGroupIAMGroupsResponseResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationVndSegmentV1alphaPlusJSONObject
}

func (o *UpdateUserGroupResponse) GetTwoHundredApplicationVndSegmentV1betaPlusJSONObject() *UpdateUserGroupIAMGroupsResponse200ResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationVndSegmentV1betaPlusJSONObject
}

func (o *UpdateUserGroupResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpdateUserGroupResponse) GetRequestErrorEnvelope() *shared.RequestErrorEnvelope {
	if o == nil {
		return nil
	}
	return o.RequestErrorEnvelope
}

func (o *UpdateUserGroupResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpdateUserGroupResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
