// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GetRegulationV1OutputRegulationOverallStatus - The current status of the regulate request.
type GetRegulationV1OutputRegulationOverallStatus string

const (
	GetRegulationV1OutputRegulationOverallStatusFailed         GetRegulationV1OutputRegulationOverallStatus = "FAILED"
	GetRegulationV1OutputRegulationOverallStatusFinished       GetRegulationV1OutputRegulationOverallStatus = "FINISHED"
	GetRegulationV1OutputRegulationOverallStatusInitialized    GetRegulationV1OutputRegulationOverallStatus = "INITIALIZED"
	GetRegulationV1OutputRegulationOverallStatusInvalid        GetRegulationV1OutputRegulationOverallStatus = "INVALID"
	GetRegulationV1OutputRegulationOverallStatusNotSupported   GetRegulationV1OutputRegulationOverallStatus = "NOT_SUPPORTED"
	GetRegulationV1OutputRegulationOverallStatusPartialSuccess GetRegulationV1OutputRegulationOverallStatus = "PARTIAL_SUCCESS"
	GetRegulationV1OutputRegulationOverallStatusRunning        GetRegulationV1OutputRegulationOverallStatus = "RUNNING"
)

func (e GetRegulationV1OutputRegulationOverallStatus) ToPointer() *GetRegulationV1OutputRegulationOverallStatus {
	return &e
}

func (e *GetRegulationV1OutputRegulationOverallStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FAILED":
		fallthrough
	case "FINISHED":
		fallthrough
	case "INITIALIZED":
		fallthrough
	case "INVALID":
		fallthrough
	case "NOT_SUPPORTED":
		fallthrough
	case "PARTIAL_SUCCESS":
		fallthrough
	case "RUNNING":
		*e = GetRegulationV1OutputRegulationOverallStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRegulationV1OutputRegulationOverallStatus: %v", v)
	}
}

// GetRegulationV1OutputRegulation - The regulate request.
type GetRegulationV1OutputRegulation struct {
	// The timestamp of the creation of the request.
	CreatedAt string `json:"createdAt"`
	// The timestamp of when the request finished.
	FinishedAt string `json:"finishedAt"`
	// The id of the regulate request.
	ID string `json:"id"`
	// The current status of the regulate request.
	OverallStatus GetRegulationV1OutputRegulationOverallStatus `json:"overallStatus"`
	// The status of each stream including all the Destinations that correspond to the stream.
	StreamStatus []StreamStatusV1 `json:"streamStatus"`
	// The id of the Workspace that the regulate request belongs to.
	WorkspaceID string `json:"workspaceId"`
}

func (o *GetRegulationV1OutputRegulation) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetRegulationV1OutputRegulation) GetFinishedAt() string {
	if o == nil {
		return ""
	}
	return o.FinishedAt
}

func (o *GetRegulationV1OutputRegulation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetRegulationV1OutputRegulation) GetOverallStatus() GetRegulationV1OutputRegulationOverallStatus {
	if o == nil {
		return GetRegulationV1OutputRegulationOverallStatus("")
	}
	return o.OverallStatus
}

func (o *GetRegulationV1OutputRegulation) GetStreamStatus() []StreamStatusV1 {
	if o == nil {
		return []StreamStatusV1{}
	}
	return o.StreamStatus
}

func (o *GetRegulationV1OutputRegulation) GetWorkspaceID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceID
}

// GetRegulationV1Output - The regulate request returned.
type GetRegulationV1Output struct {
	// The regulate request.
	Regulation GetRegulationV1OutputRegulation `json:"regulation"`
}

func (o *GetRegulationV1Output) GetRegulation() GetRegulationV1OutputRegulation {
	if o == nil {
		return GetRegulationV1OutputRegulation{}
	}
	return o.Regulation
}
