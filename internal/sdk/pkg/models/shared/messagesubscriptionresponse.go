// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MessageSubscriptionResponseStatus - The user subscribed, unsubscribed, or on initial status.
type MessageSubscriptionResponseStatus string

const (
	MessageSubscriptionResponseStatusDidNotSubscribe MessageSubscriptionResponseStatus = "DID_NOT_SUBSCRIBE"
	MessageSubscriptionResponseStatusSubscribed      MessageSubscriptionResponseStatus = "SUBSCRIBED"
	MessageSubscriptionResponseStatusUnsubscribed    MessageSubscriptionResponseStatus = "UNSUBSCRIBED"
)

func (e MessageSubscriptionResponseStatus) ToPointer() *MessageSubscriptionResponseStatus {
	return &e
}

func (e *MessageSubscriptionResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DID_NOT_SUBSCRIBE":
		fallthrough
	case "SUBSCRIBED":
		fallthrough
	case "UNSUBSCRIBED":
		*e = MessageSubscriptionResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageSubscriptionResponseStatus: %v", v)
	}
}

// MessageSubscriptionResponseType - Type is communication medium used. Either SMS, EMAIL or WHATSAPP.
type MessageSubscriptionResponseType string

const (
	MessageSubscriptionResponseTypeAndroidPush MessageSubscriptionResponseType = "ANDROID_PUSH"
	MessageSubscriptionResponseTypeEmail       MessageSubscriptionResponseType = "EMAIL"
	MessageSubscriptionResponseTypeIosPush     MessageSubscriptionResponseType = "IOS_PUSH"
	MessageSubscriptionResponseTypeSms         MessageSubscriptionResponseType = "SMS"
	MessageSubscriptionResponseTypeWhatsapp    MessageSubscriptionResponseType = "WHATSAPP"
)

func (e MessageSubscriptionResponseType) ToPointer() *MessageSubscriptionResponseType {
	return &e
}

func (e *MessageSubscriptionResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ANDROID_PUSH":
		fallthrough
	case "EMAIL":
		fallthrough
	case "IOS_PUSH":
		fallthrough
	case "SMS":
		fallthrough
	case "WHATSAPP":
		*e = MessageSubscriptionResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageSubscriptionResponseType: %v", v)
	}
}

type MessageSubscriptionResponse struct {
	// Error messages.
	Errors []MessageSubscriptionResponseError `json:"errors,omitempty"`
	// Optional subscription groups.
	Groups []UpdateGroupSubscriptionStatusResponse `json:"groups,omitempty"`
	// Key is the phone number or email.
	Key string `json:"key"`
	// The user subscribed, unsubscribed, or on initial status.
	Status *MessageSubscriptionResponseStatus `json:"status,omitempty"`
	// Type is communication medium used. Either SMS, EMAIL or WHATSAPP.
	Type MessageSubscriptionResponseType `json:"type"`
}
