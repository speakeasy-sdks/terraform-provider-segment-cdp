// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CommonEventOnViolations - The common group event on violations.
//
// Config API note: equal to `commonGroupEventOnViolations`.
type CommonEventOnViolations string

const (
	CommonEventOnViolationsAllow      CommonEventOnViolations = "ALLOW"
	CommonEventOnViolationsBlock      CommonEventOnViolations = "BLOCK"
	CommonEventOnViolationsOmitTraits CommonEventOnViolations = "OMIT_TRAITS"
)

func (e CommonEventOnViolations) ToPointer() *CommonEventOnViolations {
	return &e
}

func (e *CommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_TRAITS":
		*e = CommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommonEventOnViolations: %v", v)
	}
}

// GroupSourceSettingsV1 - Group settings.
type GroupSourceSettingsV1 struct {
	// Enable to allow group traits on violations.
	//
	// Config API note: equal to `allowGroupTraitsOnViolations`.
	AllowTraitsOnViolations *bool `json:"allowTraitsOnViolations,omitempty"`
	// Enable to allow unplanned group traits.
	//
	// Config API note: equal to `allowUnplannedGroupTraits`.
	AllowUnplannedTraits *bool `json:"allowUnplannedTraits,omitempty"`
	// The common group event on violations.
	//
	// Config API note: equal to `commonGroupEventOnViolations`.
	CommonEventOnViolations *CommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}

func (o *GroupSourceSettingsV1) GetAllowTraitsOnViolations() *bool {
	if o == nil {
		return nil
	}
	return o.AllowTraitsOnViolations
}

func (o *GroupSourceSettingsV1) GetAllowUnplannedTraits() *bool {
	if o == nil {
		return nil
	}
	return o.AllowUnplannedTraits
}

func (o *GroupSourceSettingsV1) GetCommonEventOnViolations() *CommonEventOnViolations {
	if o == nil {
		return nil
	}
	return o.CommonEventOnViolations
}

// UpdateSchemaSettingsInSourceV1InputCommonEventOnViolations - The common identify event on violations.
//
// Config API note: equal to `commonIdentifyEventOnViolations`.
type UpdateSchemaSettingsInSourceV1InputCommonEventOnViolations string

const (
	UpdateSchemaSettingsInSourceV1InputCommonEventOnViolationsAllow      UpdateSchemaSettingsInSourceV1InputCommonEventOnViolations = "ALLOW"
	UpdateSchemaSettingsInSourceV1InputCommonEventOnViolationsBlock      UpdateSchemaSettingsInSourceV1InputCommonEventOnViolations = "BLOCK"
	UpdateSchemaSettingsInSourceV1InputCommonEventOnViolationsOmitTraits UpdateSchemaSettingsInSourceV1InputCommonEventOnViolations = "OMIT_TRAITS"
)

func (e UpdateSchemaSettingsInSourceV1InputCommonEventOnViolations) ToPointer() *UpdateSchemaSettingsInSourceV1InputCommonEventOnViolations {
	return &e
}

func (e *UpdateSchemaSettingsInSourceV1InputCommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_TRAITS":
		*e = UpdateSchemaSettingsInSourceV1InputCommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSchemaSettingsInSourceV1InputCommonEventOnViolations: %v", v)
	}
}

// IdentifySourceSettingsV1 - Identify settings.
type IdentifySourceSettingsV1 struct {
	// Enable to allow identify traits on violations.
	//
	// Config API note: equal to `allowIdentifyTraitsOnViolations`.
	AllowTraitsOnViolations *bool `json:"allowTraitsOnViolations,omitempty"`
	// Enable to allow unplanned identify traits.
	//
	// Config API note: equal to `allowUnplannedIdentifyTraits`.
	AllowUnplannedTraits *bool `json:"allowUnplannedTraits,omitempty"`
	// The common identify event on violations.
	//
	// Config API note: equal to `commonIdentifyEventOnViolations`.
	CommonEventOnViolations *UpdateSchemaSettingsInSourceV1InputCommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}

func (o *IdentifySourceSettingsV1) GetAllowTraitsOnViolations() *bool {
	if o == nil {
		return nil
	}
	return o.AllowTraitsOnViolations
}

func (o *IdentifySourceSettingsV1) GetAllowUnplannedTraits() *bool {
	if o == nil {
		return nil
	}
	return o.AllowUnplannedTraits
}

func (o *IdentifySourceSettingsV1) GetCommonEventOnViolations() *UpdateSchemaSettingsInSourceV1InputCommonEventOnViolations {
	if o == nil {
		return nil
	}
	return o.CommonEventOnViolations
}

// UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolations - The common track event on violations.
//
// Config API note: equal to `commonTrackEventOnViolations`.
type UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolations string

const (
	UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolationsAllow          UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolations = "ALLOW"
	UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolationsBlock          UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolations = "BLOCK"
	UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolationsOmitProperties UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolations = "OMIT_PROPERTIES"
)

func (e UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolations) ToPointer() *UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolations {
	return &e
}

func (e *UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_PROPERTIES":
		*e = UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolations: %v", v)
	}
}

// TrackSourceSettingsV1 - Track settings.
type TrackSourceSettingsV1 struct {
	// Allow track event on violations.
	//
	// Config API note: equal to `allowTrackEventOnViolations`.
	AllowEventOnViolations *bool `json:"allowEventOnViolations,omitempty"`
	// Enable to allow track properties on violations.
	//
	// Config API note: equal to `allowTrackEventPropertiesOnViolations`.
	AllowPropertiesOnViolations *bool `json:"allowPropertiesOnViolations,omitempty"`
	// Enable to allow unplanned track event properties.
	//
	// Config API note: equal to `allowUnplannedTrackEventProperties`.
	AllowUnplannedEventProperties *bool `json:"allowUnplannedEventProperties,omitempty"`
	// Enable to allow unplanned track events.
	//
	// Config API note: equal to `allowUnplannedTrackEvents`.
	AllowUnplannedEvents *bool `json:"allowUnplannedEvents,omitempty"`
	// The common track event on violations.
	//
	// Config API note: equal to `commonTrackEventOnViolations`.
	CommonEventOnViolations *UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}

func (o *TrackSourceSettingsV1) GetAllowEventOnViolations() *bool {
	if o == nil {
		return nil
	}
	return o.AllowEventOnViolations
}

func (o *TrackSourceSettingsV1) GetAllowPropertiesOnViolations() *bool {
	if o == nil {
		return nil
	}
	return o.AllowPropertiesOnViolations
}

func (o *TrackSourceSettingsV1) GetAllowUnplannedEventProperties() *bool {
	if o == nil {
		return nil
	}
	return o.AllowUnplannedEventProperties
}

func (o *TrackSourceSettingsV1) GetAllowUnplannedEvents() *bool {
	if o == nil {
		return nil
	}
	return o.AllowUnplannedEvents
}

func (o *TrackSourceSettingsV1) GetCommonEventOnViolations() *UpdateSchemaSettingsInSourceV1InputSchemasCommonEventOnViolations {
	if o == nil {
		return nil
	}
	return o.CommonEventOnViolations
}

// UpdateSchemaSettingsInSourceV1Input - Input to update a Source's settings.
type UpdateSchemaSettingsInSourceV1Input struct {
	// Source id to forward blocked events to.
	ForwardingBlockedEventsTo *string `json:"forwardingBlockedEventsTo,omitempty"`
	// Source id to forward violations to.
	ForwardingViolationsTo *string `json:"forwardingViolationsTo,omitempty"`
	// Group settings.
	Group *GroupSourceSettingsV1 `json:"group,omitempty"`
	// Identify settings.
	Identify *IdentifySourceSettingsV1 `json:"identify,omitempty"`
	// Track settings.
	Track *TrackSourceSettingsV1 `json:"track,omitempty"`
}

func (o *UpdateSchemaSettingsInSourceV1Input) GetForwardingBlockedEventsTo() *string {
	if o == nil {
		return nil
	}
	return o.ForwardingBlockedEventsTo
}

func (o *UpdateSchemaSettingsInSourceV1Input) GetForwardingViolationsTo() *string {
	if o == nil {
		return nil
	}
	return o.ForwardingViolationsTo
}

func (o *UpdateSchemaSettingsInSourceV1Input) GetGroup() *GroupSourceSettingsV1 {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *UpdateSchemaSettingsInSourceV1Input) GetIdentify() *IdentifySourceSettingsV1 {
	if o == nil {
		return nil
	}
	return o.Identify
}

func (o *UpdateSchemaSettingsInSourceV1Input) GetTrack() *TrackSourceSettingsV1 {
	if o == nil {
		return nil
	}
	return o.Track
}
