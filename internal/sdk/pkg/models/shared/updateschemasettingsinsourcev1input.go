// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolations - The common group event on violations.
//
// Config API note: equal to `commonGroupEventOnViolations`.
type UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolations string

const (
	UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolationsAllow      UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolations = "ALLOW"
	UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolationsBlock      UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolations = "BLOCK"
	UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolationsOmitTraits UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolations = "OMIT_TRAITS"
)

func (e UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolations) ToPointer() *UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolations {
	return &e
}

func (e *UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_TRAITS":
		*e = UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolations: %v", v)
	}
}

// UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1 - Group settings.
type UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1 struct {
	// Enable to allow group traits on violations.
	//
	// Config API note: equal to `allowGroupTraitsOnViolations`.
	AllowTraitsOnViolations *bool `json:"allowTraitsOnViolations,omitempty"`
	// Enable to allow unplanned group traits.
	//
	// Config API note: equal to `allowUnplannedGroupTraits`.
	AllowUnplannedTraits *bool `json:"allowUnplannedTraits,omitempty"`
	// The common group event on violations.
	//
	// Config API note: equal to `commonGroupEventOnViolations`.
	CommonEventOnViolations *UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1CommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}

// UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolations - The common identify event on violations.
//
// Config API note: equal to `commonIdentifyEventOnViolations`.
type UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolations string

const (
	UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolationsAllow      UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolations = "ALLOW"
	UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolationsBlock      UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolations = "BLOCK"
	UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolationsOmitTraits UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolations = "OMIT_TRAITS"
)

func (e UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolations) ToPointer() *UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolations {
	return &e
}

func (e *UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_TRAITS":
		*e = UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolations: %v", v)
	}
}

// UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1 - Identify settings.
type UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1 struct {
	// Enable to allow identify traits on violations.
	//
	// Config API note: equal to `allowIdentifyTraitsOnViolations`.
	AllowTraitsOnViolations *bool `json:"allowTraitsOnViolations,omitempty"`
	// Enable to allow unplanned identify traits.
	//
	// Config API note: equal to `allowUnplannedIdentifyTraits`.
	AllowUnplannedTraits *bool `json:"allowUnplannedTraits,omitempty"`
	// The common identify event on violations.
	//
	// Config API note: equal to `commonIdentifyEventOnViolations`.
	CommonEventOnViolations *UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1CommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}

// UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolations - The common track event on violations.
//
// Config API note: equal to `commonTrackEventOnViolations`.
type UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolations string

const (
	UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolationsAllow          UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolations = "ALLOW"
	UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolationsBlock          UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolations = "BLOCK"
	UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolationsOmitProperties UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolations = "OMIT_PROPERTIES"
)

func (e UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolations) ToPointer() *UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolations {
	return &e
}

func (e *UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALLOW":
		fallthrough
	case "BLOCK":
		fallthrough
	case "OMIT_PROPERTIES":
		*e = UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolations: %v", v)
	}
}

// UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1 - Track settings.
type UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1 struct {
	// Allow track event on violations.
	//
	// Config API note: equal to `allowTrackEventOnViolations`.
	AllowEventOnViolations *bool `json:"allowEventOnViolations,omitempty"`
	// Enable to allow track properties on violations.
	//
	// Config API note: equal to `allowTrackEventPropertiesOnViolations`.
	AllowPropertiesOnViolations *bool `json:"allowPropertiesOnViolations,omitempty"`
	// Enable to allow unplanned track event properties.
	//
	// Config API note: equal to `allowUnplannedTrackEventProperties`.
	AllowUnplannedEventProperties *bool `json:"allowUnplannedEventProperties,omitempty"`
	// Enable to allow unplanned track events.
	//
	// Config API note: equal to `allowUnplannedTrackEvents`.
	AllowUnplannedEvents *bool `json:"allowUnplannedEvents,omitempty"`
	// The common track event on violations.
	//
	// Config API note: equal to `commonTrackEventOnViolations`.
	CommonEventOnViolations *UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1CommonEventOnViolations `json:"commonEventOnViolations,omitempty"`
}

// UpdateSchemaSettingsInSourceV1Input - Input to update a Source's settings.
type UpdateSchemaSettingsInSourceV1Input struct {
	// Source id to forward blocked events to.
	ForwardingBlockedEventsTo *string `json:"forwardingBlockedEventsTo,omitempty"`
	// Source id to forward violations to.
	ForwardingViolationsTo *string `json:"forwardingViolationsTo,omitempty"`
	// Group settings.
	Group *UpdateSchemaSettingsInSourceV1InputGroupSourceSettingsV1 `json:"group,omitempty"`
	// Identify settings.
	Identify *UpdateSchemaSettingsInSourceV1InputIdentifySourceSettingsV1 `json:"identify,omitempty"`
	// Track settings.
	Track *UpdateSchemaSettingsInSourceV1InputTrackSourceSettingsV1 `json:"track,omitempty"`
}
