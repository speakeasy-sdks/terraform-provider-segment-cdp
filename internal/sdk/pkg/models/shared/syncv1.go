// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// SyncV1 - Represents a sync between a Source and Warehouse.
//
// A sync occurs when data from a Source is loaded into a Warehouse.
type SyncV1 struct {
	// The number of rows synced into the Warehouse.
	Count float64 `json:"count"`
	// The duration of the sync in seconds. Returns the partial duration if the sync has not finished yet.
	Duration float64 `json:"duration"`
	// The time the sync completed. Returns null if unfinished.
	End *string `json:"end"`
	// The human-readable counterpart of `duration`.
	HumanDuration string `json:"humanDuration"`
	// Notices that contain the events that occurred during the sync.
	Notices []SyncNoticeV1 `json:"notices"`
	// The id of the Source loaded in the sync.
	SourceID string `json:"sourceId"`
	// The start time of the sync.
	Start string `json:"start"`
	// The status of the sync.
	Status string `json:"status"`
}

func (o *SyncV1) GetCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *SyncV1) GetDuration() float64 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

func (o *SyncV1) GetEnd() *string {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *SyncV1) GetHumanDuration() string {
	if o == nil {
		return ""
	}
	return o.HumanDuration
}

func (o *SyncV1) GetNotices() []SyncNoticeV1 {
	if o == nil {
		return []SyncNoticeV1{}
	}
	return o.Notices
}

func (o *SyncV1) GetSourceID() string {
	if o == nil {
		return ""
	}
	return o.SourceID
}

func (o *SyncV1) GetStart() string {
	if o == nil {
		return ""
	}
	return o.Start
}

func (o *SyncV1) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}
