// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PermissionResourceV1Type - The type for this resource.
type PermissionResourceV1Type string

const (
	PermissionResourceV1TypeFunction  PermissionResourceV1Type = "FUNCTION"
	PermissionResourceV1TypeSource    PermissionResourceV1Type = "SOURCE"
	PermissionResourceV1TypeSpace     PermissionResourceV1Type = "SPACE"
	PermissionResourceV1TypeWarehouse PermissionResourceV1Type = "WAREHOUSE"
	PermissionResourceV1TypeWorkspace PermissionResourceV1Type = "WORKSPACE"
)

func (e PermissionResourceV1Type) ToPointer() *PermissionResourceV1Type {
	return &e
}

func (e *PermissionResourceV1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FUNCTION":
		fallthrough
	case "SOURCE":
		fallthrough
	case "SPACE":
		fallthrough
	case "WAREHOUSE":
		fallthrough
	case "WORKSPACE":
		*e = PermissionResourceV1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PermissionResourceV1Type: %v", v)
	}
}

// PermissionResourceV1 - The most basic representation of a resource belonging to a set of permissions.
type PermissionResourceV1 struct {
	// The id of this resource.
	ID string `json:"id"`
	// The labels that further refine access to this resource. Labels are exclusive to Workspace-level permissions.
	Labels []AllowedLabelBeta `json:"labels,omitempty"`
	// The type for this resource.
	Type PermissionResourceV1Type `json:"type"`
}
