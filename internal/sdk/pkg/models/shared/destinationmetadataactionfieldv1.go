// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DestinationMetadataActionFieldV1Type - The data type for this value.
type DestinationMetadataActionFieldV1Type string

const (
	DestinationMetadataActionFieldV1TypeBoolean  DestinationMetadataActionFieldV1Type = "BOOLEAN"
	DestinationMetadataActionFieldV1TypeDatetime DestinationMetadataActionFieldV1Type = "DATETIME"
	DestinationMetadataActionFieldV1TypeHidden   DestinationMetadataActionFieldV1Type = "HIDDEN"
	DestinationMetadataActionFieldV1TypeInteger  DestinationMetadataActionFieldV1Type = "INTEGER"
	DestinationMetadataActionFieldV1TypeNumber   DestinationMetadataActionFieldV1Type = "NUMBER"
	DestinationMetadataActionFieldV1TypeObject   DestinationMetadataActionFieldV1Type = "OBJECT"
	DestinationMetadataActionFieldV1TypePassword DestinationMetadataActionFieldV1Type = "PASSWORD"
	DestinationMetadataActionFieldV1TypeString   DestinationMetadataActionFieldV1Type = "STRING"
	DestinationMetadataActionFieldV1TypeText     DestinationMetadataActionFieldV1Type = "TEXT"
)

func (e DestinationMetadataActionFieldV1Type) ToPointer() *DestinationMetadataActionFieldV1Type {
	return &e
}

func (e *DestinationMetadataActionFieldV1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOOLEAN":
		fallthrough
	case "DATETIME":
		fallthrough
	case "HIDDEN":
		fallthrough
	case "INTEGER":
		fallthrough
	case "NUMBER":
		fallthrough
	case "OBJECT":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "STRING":
		fallthrough
	case "TEXT":
		*e = DestinationMetadataActionFieldV1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMetadataActionFieldV1Type: %v", v)
	}
}

// DestinationMetadataActionFieldV1 - Represents a field used in configuring an action.
type DestinationMetadataActionFieldV1 struct {
	// Whether this field allows null values.
	AllowNull bool `json:"allowNull"`
	// A list of machine-readable value/label pairs to populate a static dropdown.
	Choices interface{} `json:"choices,omitempty"`
	// A default value that is saved the first time an action is created.
	DefaultValue interface{} `json:"defaultValue,omitempty"`
	// A human-readable description of this value. You can use Markdown.
	Description string `json:"description"`
	// Whether this field should execute a dynamic request to fetch choices to populate a dropdown. When true, `choices` is ignored.
	Dynamic bool `json:"dynamic"`
	// A unique machine-readable key for the field. Should ideally match the expected key in the action\'s API request.
	FieldKey string `json:"fieldKey"`
	// The primary key of the field.
	ID string `json:"id"`
	// A human-readable label for this value.
	Label string `json:"label"`
	// Whether a user can provide multiples of this field.
	Multiple bool `json:"multiple"`
	// An example value displayed but not saved.
	Placeholder *string `json:"placeholder,omitempty"`
	// Whether this field is required.
	Required bool `json:"required"`
	// The order this particular field is (used in the UI for displaying the fields in a specified order).
	SortOrder float64 `json:"sortOrder"`
	// The data type for this value.
	Type DestinationMetadataActionFieldV1Type `json:"type"`
}

func (o *DestinationMetadataActionFieldV1) GetAllowNull() bool {
	if o == nil {
		return false
	}
	return o.AllowNull
}

func (o *DestinationMetadataActionFieldV1) GetChoices() interface{} {
	if o == nil {
		return nil
	}
	return o.Choices
}

func (o *DestinationMetadataActionFieldV1) GetDefaultValue() interface{} {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *DestinationMetadataActionFieldV1) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *DestinationMetadataActionFieldV1) GetDynamic() bool {
	if o == nil {
		return false
	}
	return o.Dynamic
}

func (o *DestinationMetadataActionFieldV1) GetFieldKey() string {
	if o == nil {
		return ""
	}
	return o.FieldKey
}

func (o *DestinationMetadataActionFieldV1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DestinationMetadataActionFieldV1) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *DestinationMetadataActionFieldV1) GetMultiple() bool {
	if o == nil {
		return false
	}
	return o.Multiple
}

func (o *DestinationMetadataActionFieldV1) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *DestinationMetadataActionFieldV1) GetRequired() bool {
	if o == nil {
		return false
	}
	return o.Required
}

func (o *DestinationMetadataActionFieldV1) GetSortOrder() float64 {
	if o == nil {
		return 0.0
	}
	return o.SortOrder
}

func (o *DestinationMetadataActionFieldV1) GetType() DestinationMetadataActionFieldV1Type {
	if o == nil {
		return DestinationMetadataActionFieldV1Type("")
	}
	return o.Type
}
