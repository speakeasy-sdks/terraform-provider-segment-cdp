// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DestinationV1LogosBeta - Represents a logo.
type DestinationV1LogosBeta struct {
	// The alternative text for this logo.
	Alt *string `json:"alt,omitempty"`
	// The default URL for this logo.
	Default string `json:"default"`
	// The logo mark.
	Mark *string `json:"mark,omitempty"`
}

func (o *DestinationV1LogosBeta) GetAlt() *string {
	if o == nil {
		return nil
	}
	return o.Alt
}

func (o *DestinationV1LogosBeta) GetDefault() string {
	if o == nil {
		return ""
	}
	return o.Default
}

func (o *DestinationV1LogosBeta) GetMark() *string {
	if o == nil {
		return nil
	}
	return o.Mark
}

// DestinationV1Status - Support status of the Destination.
type DestinationV1Status string

const (
	DestinationV1StatusDeprecated       DestinationV1Status = "DEPRECATED"
	DestinationV1StatusPrivateBeta      DestinationV1Status = "PRIVATE_BETA"
	DestinationV1StatusPrivateBuilding  DestinationV1Status = "PRIVATE_BUILDING"
	DestinationV1StatusPrivateSubmitted DestinationV1Status = "PRIVATE_SUBMITTED"
	DestinationV1StatusPublic           DestinationV1Status = "PUBLIC"
	DestinationV1StatusPublicBeta       DestinationV1Status = "PUBLIC_BETA"
	DestinationV1StatusUnavailable      DestinationV1Status = "UNAVAILABLE"
)

func (e DestinationV1Status) ToPointer() *DestinationV1Status {
	return &e
}

func (e *DestinationV1Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEPRECATED":
		fallthrough
	case "PRIVATE_BETA":
		fallthrough
	case "PRIVATE_BUILDING":
		fallthrough
	case "PRIVATE_SUBMITTED":
		fallthrough
	case "PUBLIC":
		fallthrough
	case "PUBLIC_BETA":
		fallthrough
	case "UNAVAILABLE":
		*e = DestinationV1Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationV1Status: %v", v)
	}
}

// DestinationV1CloudModeInstances - This Destination's support level for cloud mode instances.
// The values '0' and 'NONE', and '1' and 'SINGLE' are equivalent.
type DestinationV1CloudModeInstances string

const (
	DestinationV1CloudModeInstancesZero     DestinationV1CloudModeInstances = "0"
	DestinationV1CloudModeInstancesOne      DestinationV1CloudModeInstances = "1"
	DestinationV1CloudModeInstancesMultiple DestinationV1CloudModeInstances = "MULTIPLE"
	DestinationV1CloudModeInstancesNone     DestinationV1CloudModeInstances = "NONE"
	DestinationV1CloudModeInstancesSingle   DestinationV1CloudModeInstances = "SINGLE"
)

func (e DestinationV1CloudModeInstances) ToPointer() *DestinationV1CloudModeInstances {
	return &e
}

func (e *DestinationV1CloudModeInstances) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "MULTIPLE":
		fallthrough
	case "NONE":
		fallthrough
	case "SINGLE":
		*e = DestinationV1CloudModeInstances(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationV1CloudModeInstances: %v", v)
	}
}

// DestinationV1DeviceModeInstances - This Destination's support level for device mode instances.
// Support for multiple device mode instances is currently not planned.
// The values '0' and 'NONE', and '1' and 'SINGLE' are equivalent.
type DestinationV1DeviceModeInstances string

const (
	DestinationV1DeviceModeInstancesZero   DestinationV1DeviceModeInstances = "0"
	DestinationV1DeviceModeInstancesOne    DestinationV1DeviceModeInstances = "1"
	DestinationV1DeviceModeInstancesNone   DestinationV1DeviceModeInstances = "NONE"
	DestinationV1DeviceModeInstancesSingle DestinationV1DeviceModeInstances = "SINGLE"
)

func (e DestinationV1DeviceModeInstances) ToPointer() *DestinationV1DeviceModeInstances {
	return &e
}

func (e *DestinationV1DeviceModeInstances) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "NONE":
		fallthrough
	case "SINGLE":
		*e = DestinationV1DeviceModeInstances(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationV1DeviceModeInstances: %v", v)
	}
}

// DestinationV1DestinationMetadataFeaturesV1 - Represents features that a given Destination supports.
type DestinationV1DestinationMetadataFeaturesV1 struct {
	// Whether this Destination supports browser unbundling.
	BrowserUnbundling *bool `json:"browserUnbundling,omitempty"`
	// Whether this Destination supports public browser unbundling.
	BrowserUnbundlingPublic *bool `json:"browserUnbundlingPublic,omitempty"`
	// This Destination's support level for cloud mode instances.
	// The values '0' and 'NONE', and '1' and 'SINGLE' are equivalent.
	CloudModeInstances *DestinationV1CloudModeInstances `json:"cloudModeInstances,omitempty"`
	// This Destination's support level for device mode instances.
	// Support for multiple device mode instances is currently not planned.
	// The values '0' and 'NONE', and '1' and 'SINGLE' are equivalent.
	DeviceModeInstances *DestinationV1DeviceModeInstances `json:"deviceModeInstances,omitempty"`
	// Whether this Destination supports replays.
	Replay *bool `json:"replay,omitempty"`
}

func (o *DestinationV1DestinationMetadataFeaturesV1) GetBrowserUnbundling() *bool {
	if o == nil {
		return nil
	}
	return o.BrowserUnbundling
}

func (o *DestinationV1DestinationMetadataFeaturesV1) GetBrowserUnbundlingPublic() *bool {
	if o == nil {
		return nil
	}
	return o.BrowserUnbundlingPublic
}

func (o *DestinationV1DestinationMetadataFeaturesV1) GetCloudModeInstances() *DestinationV1CloudModeInstances {
	if o == nil {
		return nil
	}
	return o.CloudModeInstances
}

func (o *DestinationV1DestinationMetadataFeaturesV1) GetDeviceModeInstances() *DestinationV1DeviceModeInstances {
	if o == nil {
		return nil
	}
	return o.DeviceModeInstances
}

func (o *DestinationV1DestinationMetadataFeaturesV1) GetReplay() *bool {
	if o == nil {
		return nil
	}
	return o.Replay
}

// DestinationV1DestinationMetadataMethodsV1 - Represents methods that a given Destination supports.
type DestinationV1DestinationMetadataMethodsV1 struct {
	// Identifies if the Destination supports the `alias` method.
	Alias *bool `json:"alias,omitempty"`
	// Identifies if the Destination supports the `group` method.
	Group *bool `json:"group,omitempty"`
	// Identifies if the Destination supports the `identify` method.
	Identify *bool `json:"identify,omitempty"`
	// Identifies if the Destination supports the `pageview` method.
	Pageview *bool `json:"pageview,omitempty"`
	// Identifies if the Destination supports the `track` method.
	Track *bool `json:"track,omitempty"`
}

func (o *DestinationV1DestinationMetadataMethodsV1) GetAlias() *bool {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *DestinationV1DestinationMetadataMethodsV1) GetGroup() *bool {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *DestinationV1DestinationMetadataMethodsV1) GetIdentify() *bool {
	if o == nil {
		return nil
	}
	return o.Identify
}

func (o *DestinationV1DestinationMetadataMethodsV1) GetPageview() *bool {
	if o == nil {
		return nil
	}
	return o.Pageview
}

func (o *DestinationV1DestinationMetadataMethodsV1) GetTrack() *bool {
	if o == nil {
		return nil
	}
	return o.Track
}

// DestinationV1DestinationMetadataPlatformsV1 - Represents platforms that a given Destination supports.
type DestinationV1DestinationMetadataPlatformsV1 struct {
	// Whether this Destination supports browser events.
	Browser *bool `json:"browser,omitempty"`
	// Whether this Destination supports mobile events.
	Mobile *bool `json:"mobile,omitempty"`
	// Whether this Destination supports server events.
	Server *bool `json:"server,omitempty"`
}

func (o *DestinationV1DestinationMetadataPlatformsV1) GetBrowser() *bool {
	if o == nil {
		return nil
	}
	return o.Browser
}

func (o *DestinationV1DestinationMetadataPlatformsV1) GetMobile() *bool {
	if o == nil {
		return nil
	}
	return o.Mobile
}

func (o *DestinationV1DestinationMetadataPlatformsV1) GetServer() *bool {
	if o == nil {
		return nil
	}
	return o.Server
}

// DestinationV1DestinationMetadataV1 - Represents a Destination within Segment.
//
// A Destination is a target for Segment to forward data to, and represents a tool or storage Destination.
type DestinationV1DestinationMetadataV1 struct {
	// Actions available for the Destination.
	Actions []DestinationMetadataActionV1 `json:"actions"`
	// A list of categories with which the Destination is associated.
	Categories []string `json:"categories"`
	// A list of components this Destination provides.
	Components []DestinationMetadataComponentV1 `json:"components"`
	// Contact info for Integration Owners.
	Contacts []Contact `json:"contacts,omitempty"`
	// The description of the Destination.
	Description string `json:"description"`
	// The id of the Destination metadata.
	//
	// Config API note: analogous to `name`.
	ID string `json:"id"`
	// The Destination's logos.
	Logos DestinationV1LogosBeta `json:"logos"`
	// The user-friendly name of the Destination.
	//
	// Config API note: equal to `displayName`.
	Name string `json:"name"`
	// Options configured for the Destination.
	Options []IntegrationOptionBeta `json:"options"`
	// Partner Owned flag.
	PartnerOwned *bool `json:"partnerOwned,omitempty"`
	// Predefined Destination subscriptions that can optionally be applied when connecting a new instance of the Destination.
	Presets []DestinationMetadataSubscriptionPresetV1 `json:"presets"`
	// A list of names previously used by the Destination.
	PreviousNames []string `json:"previousNames"`
	// The list of regional endpoints for this Destination.
	RegionEndpoints []string `json:"regionEndpoints,omitempty"`
	// The slug used to identify the Destination in the Segment app.
	Slug string `json:"slug"`
	// Support status of the Destination.
	Status DestinationV1Status `json:"status"`
	// Features that this Destination supports.
	//
	// Config API note: holds `browserUnbundling` fields.
	SupportedFeatures DestinationV1DestinationMetadataFeaturesV1 `json:"supportedFeatures"`
	// Methods that this Destination supports.
	//
	// Config API note: equal to `methods`.
	SupportedMethods DestinationV1DestinationMetadataMethodsV1 `json:"supportedMethods"`
	// Platforms from which the Destination receives events.
	//
	// Config API note: equal to `platforms`.
	SupportedPlatforms DestinationV1DestinationMetadataPlatformsV1 `json:"supportedPlatforms"`
	// A list of supported regions for this Destination.
	SupportedRegions []string `json:"supportedRegions,omitempty"`
	// A website URL for this Destination.
	Website string `json:"website"`
}

func (o *DestinationV1DestinationMetadataV1) GetActions() []DestinationMetadataActionV1 {
	if o == nil {
		return []DestinationMetadataActionV1{}
	}
	return o.Actions
}

func (o *DestinationV1DestinationMetadataV1) GetCategories() []string {
	if o == nil {
		return []string{}
	}
	return o.Categories
}

func (o *DestinationV1DestinationMetadataV1) GetComponents() []DestinationMetadataComponentV1 {
	if o == nil {
		return []DestinationMetadataComponentV1{}
	}
	return o.Components
}

func (o *DestinationV1DestinationMetadataV1) GetContacts() []Contact {
	if o == nil {
		return nil
	}
	return o.Contacts
}

func (o *DestinationV1DestinationMetadataV1) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *DestinationV1DestinationMetadataV1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DestinationV1DestinationMetadataV1) GetLogos() DestinationV1LogosBeta {
	if o == nil {
		return DestinationV1LogosBeta{}
	}
	return o.Logos
}

func (o *DestinationV1DestinationMetadataV1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DestinationV1DestinationMetadataV1) GetOptions() []IntegrationOptionBeta {
	if o == nil {
		return []IntegrationOptionBeta{}
	}
	return o.Options
}

func (o *DestinationV1DestinationMetadataV1) GetPartnerOwned() *bool {
	if o == nil {
		return nil
	}
	return o.PartnerOwned
}

func (o *DestinationV1DestinationMetadataV1) GetPresets() []DestinationMetadataSubscriptionPresetV1 {
	if o == nil {
		return []DestinationMetadataSubscriptionPresetV1{}
	}
	return o.Presets
}

func (o *DestinationV1DestinationMetadataV1) GetPreviousNames() []string {
	if o == nil {
		return []string{}
	}
	return o.PreviousNames
}

func (o *DestinationV1DestinationMetadataV1) GetRegionEndpoints() []string {
	if o == nil {
		return nil
	}
	return o.RegionEndpoints
}

func (o *DestinationV1DestinationMetadataV1) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *DestinationV1DestinationMetadataV1) GetStatus() DestinationV1Status {
	if o == nil {
		return DestinationV1Status("")
	}
	return o.Status
}

func (o *DestinationV1DestinationMetadataV1) GetSupportedFeatures() DestinationV1DestinationMetadataFeaturesV1 {
	if o == nil {
		return DestinationV1DestinationMetadataFeaturesV1{}
	}
	return o.SupportedFeatures
}

func (o *DestinationV1DestinationMetadataV1) GetSupportedMethods() DestinationV1DestinationMetadataMethodsV1 {
	if o == nil {
		return DestinationV1DestinationMetadataMethodsV1{}
	}
	return o.SupportedMethods
}

func (o *DestinationV1DestinationMetadataV1) GetSupportedPlatforms() DestinationV1DestinationMetadataPlatformsV1 {
	if o == nil {
		return DestinationV1DestinationMetadataPlatformsV1{}
	}
	return o.SupportedPlatforms
}

func (o *DestinationV1DestinationMetadataV1) GetSupportedRegions() []string {
	if o == nil {
		return nil
	}
	return o.SupportedRegions
}

func (o *DestinationV1DestinationMetadataV1) GetWebsite() string {
	if o == nil {
		return ""
	}
	return o.Website
}

// DestinationV1 - Business tools or apps that you can connect to the data flowing through Segment.
//
// This is equal to the Destination object in Config API, with the following fields omitted:
// - catalogId
// - createTime
// - updateTime
// - connectionMode.
type DestinationV1 struct {
	// Whether this instance of a Destination receives data.
	Enabled bool `json:"enabled"`
	// The unique identifier of this instance of a Destination.
	//
	// Config API note: analogous to `name`.
	ID string `json:"id"`
	// The metadata of the Destination of which this Destination is an instance of. For example, Google Analytics or Amplitude.
	Metadata DestinationV1DestinationMetadataV1 `json:"metadata"`
	// The name of this instance of a Destination.
	//
	// Config API note: equal to `displayName`.
	Name *string `json:"name,omitempty"`
	// The collection of settings associated with a Destination.
	//
	// Config API note: equal to `config`.
	Settings map[string]interface{} `json:"settings"`
	// The id of a Source connected to this instance of a Destination.
	//
	// Config API note: analogous to `parent`.
	SourceID string `json:"sourceId"`
}

func (o *DestinationV1) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *DestinationV1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DestinationV1) GetMetadata() DestinationV1DestinationMetadataV1 {
	if o == nil {
		return DestinationV1DestinationMetadataV1{}
	}
	return o.Metadata
}

func (o *DestinationV1) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DestinationV1) GetSettings() map[string]interface{} {
	if o == nil {
		return map[string]interface{}{}
	}
	return o.Settings
}

func (o *DestinationV1) GetSourceID() string {
	if o == nil {
		return ""
	}
	return o.SourceID
}
