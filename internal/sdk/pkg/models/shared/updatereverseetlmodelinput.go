// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpdateReverseEtlModelInputScheduleStrategy - Determines the strategy used for triggering syncs, which will be used in
// conjunction with scheduleConfig.
type UpdateReverseEtlModelInputScheduleStrategy string

const (
	UpdateReverseEtlModelInputScheduleStrategyManual       UpdateReverseEtlModelInputScheduleStrategy = "MANUAL"
	UpdateReverseEtlModelInputScheduleStrategyPeriodic     UpdateReverseEtlModelInputScheduleStrategy = "PERIODIC"
	UpdateReverseEtlModelInputScheduleStrategySpecificDays UpdateReverseEtlModelInputScheduleStrategy = "SPECIFIC_DAYS"
)

func (e UpdateReverseEtlModelInputScheduleStrategy) ToPointer() *UpdateReverseEtlModelInputScheduleStrategy {
	return &e
}

func (e *UpdateReverseEtlModelInputScheduleStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MANUAL":
		fallthrough
	case "PERIODIC":
		fallthrough
	case "SPECIFIC_DAYS":
		*e = UpdateReverseEtlModelInputScheduleStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateReverseEtlModelInputScheduleStrategy: %v", v)
	}
}

// UpdateReverseEtlModelInput - Defines how to update an existing Model.
type UpdateReverseEtlModelInput struct {
	// A longer, more descriptive explanation of the Model.
	Description *string `json:"description,omitempty"`
	// Indicates whether the Model should have syncs enabled. When disabled, no
	// syncs will be triggered, regardless of the enabled status of the attached
	// destinations/subscriptions.
	Enabled *bool `json:"enabled,omitempty"`
	// A short, human-readable description of the Model.
	Name *string `json:"name,omitempty"`
	// The SQL query that will be executed to extract data from the connected
	// Source.
	Query *string `json:"query,omitempty"`
	// Indicates the column named in `query` that should be used to uniquely
	// identify the extracted records.
	QueryIdentifierColumn *string `json:"queryIdentifierColumn,omitempty"`
	// Depending on the chosen strategy, configures the schedule for this model.
	ScheduleConfig map[string]interface{} `json:"scheduleConfig,omitempty"`
	// Determines the strategy used for triggering syncs, which will be used in
	// conjunction with scheduleConfig.
	ScheduleStrategy *UpdateReverseEtlModelInputScheduleStrategy `json:"scheduleStrategy,omitempty"`
}

func (o *UpdateReverseEtlModelInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateReverseEtlModelInput) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *UpdateReverseEtlModelInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateReverseEtlModelInput) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *UpdateReverseEtlModelInput) GetQueryIdentifierColumn() *string {
	if o == nil {
		return nil
	}
	return o.QueryIdentifierColumn
}

func (o *UpdateReverseEtlModelInput) GetScheduleConfig() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.ScheduleConfig
}

func (o *UpdateReverseEtlModelInput) GetScheduleStrategy() *UpdateReverseEtlModelInputScheduleStrategy {
	if o == nil {
		return nil
	}
	return o.ScheduleStrategy
}
