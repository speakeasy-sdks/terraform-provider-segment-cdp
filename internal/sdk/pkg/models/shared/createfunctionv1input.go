// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ResourceType - The Function type.
//
// Config API note: equal to `type`.
type ResourceType string

const (
	ResourceTypeDestination       ResourceType = "DESTINATION"
	ResourceTypeInsertDestination ResourceType = "INSERT_DESTINATION"
	ResourceTypeSource            ResourceType = "SOURCE"
)

func (e ResourceType) ToPointer() *ResourceType {
	return &e
}

func (e *ResourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DESTINATION":
		fallthrough
	case "INSERT_DESTINATION":
		fallthrough
	case "SOURCE":
		*e = ResourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceType: %v", v)
	}
}

// CreateFunctionV1Input - Creates a Function.
type CreateFunctionV1Input struct {
	// The Function code.
	Code string `json:"code"`
	// A description for this Function.
	Description *string `json:"description,omitempty"`
	// A display name for this Function.
	//
	// Note that Destination Functions append the Workspace to the display name.
	DisplayName string `json:"displayName"`
	// The URL of the logo for this Function.
	LogoURL *string `json:"logoUrl,omitempty"`
	// The Function type.
	//
	// Config API note: equal to `type`.
	ResourceType ResourceType `json:"resourceType"`
	// The list of settings for this Function.
	Settings []FunctionSettingV1 `json:"settings,omitempty"`
}

func (o *CreateFunctionV1Input) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateFunctionV1Input) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateFunctionV1Input) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *CreateFunctionV1Input) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *CreateFunctionV1Input) GetResourceType() ResourceType {
	if o == nil {
		return ResourceType("")
	}
	return o.ResourceType
}

func (o *CreateFunctionV1Input) GetSettings() []FunctionSettingV1 {
	if o == nil {
		return nil
	}
	return o.Settings
}
