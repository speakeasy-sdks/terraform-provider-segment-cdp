// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Logos - The Destination's logos.
type Logos struct {
	// The alternative text for this logo.
	Alt *string `json:"alt,omitempty"`
	// The default URL for this logo.
	Default string `json:"default"`
	// The logo mark.
	Mark *string `json:"mark,omitempty"`
}

func (o *Logos) GetAlt() *string {
	if o == nil {
		return nil
	}
	return o.Alt
}

func (o *Logos) GetDefault() string {
	if o == nil {
		return ""
	}
	return o.Default
}

func (o *Logos) GetMark() *string {
	if o == nil {
		return nil
	}
	return o.Mark
}

// DestinationMetadataV1Status - Support status of the Destination.
type DestinationMetadataV1Status string

const (
	DestinationMetadataV1StatusDeprecated       DestinationMetadataV1Status = "DEPRECATED"
	DestinationMetadataV1StatusPrivateBeta      DestinationMetadataV1Status = "PRIVATE_BETA"
	DestinationMetadataV1StatusPrivateBuilding  DestinationMetadataV1Status = "PRIVATE_BUILDING"
	DestinationMetadataV1StatusPrivateSubmitted DestinationMetadataV1Status = "PRIVATE_SUBMITTED"
	DestinationMetadataV1StatusPublic           DestinationMetadataV1Status = "PUBLIC"
	DestinationMetadataV1StatusPublicBeta       DestinationMetadataV1Status = "PUBLIC_BETA"
	DestinationMetadataV1StatusUnavailable      DestinationMetadataV1Status = "UNAVAILABLE"
)

func (e DestinationMetadataV1Status) ToPointer() *DestinationMetadataV1Status {
	return &e
}

func (e *DestinationMetadataV1Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEPRECATED":
		fallthrough
	case "PRIVATE_BETA":
		fallthrough
	case "PRIVATE_BUILDING":
		fallthrough
	case "PRIVATE_SUBMITTED":
		fallthrough
	case "PUBLIC":
		fallthrough
	case "PUBLIC_BETA":
		fallthrough
	case "UNAVAILABLE":
		*e = DestinationMetadataV1Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationMetadataV1Status: %v", v)
	}
}

// CloudModeInstances - This Destination's support level for cloud mode instances.
// The values '0' and 'NONE', and '1' and 'SINGLE' are equivalent.
type CloudModeInstances string

const (
	CloudModeInstancesZero     CloudModeInstances = "0"
	CloudModeInstancesOne      CloudModeInstances = "1"
	CloudModeInstancesMultiple CloudModeInstances = "MULTIPLE"
	CloudModeInstancesNone     CloudModeInstances = "NONE"
	CloudModeInstancesSingle   CloudModeInstances = "SINGLE"
)

func (e CloudModeInstances) ToPointer() *CloudModeInstances {
	return &e
}

func (e *CloudModeInstances) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "MULTIPLE":
		fallthrough
	case "NONE":
		fallthrough
	case "SINGLE":
		*e = CloudModeInstances(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloudModeInstances: %v", v)
	}
}

// DeviceModeInstances - This Destination's support level for device mode instances.
// Support for multiple device mode instances is currently not planned.
// The values '0' and 'NONE', and '1' and 'SINGLE' are equivalent.
type DeviceModeInstances string

const (
	DeviceModeInstancesZero   DeviceModeInstances = "0"
	DeviceModeInstancesOne    DeviceModeInstances = "1"
	DeviceModeInstancesNone   DeviceModeInstances = "NONE"
	DeviceModeInstancesSingle DeviceModeInstances = "SINGLE"
)

func (e DeviceModeInstances) ToPointer() *DeviceModeInstances {
	return &e
}

func (e *DeviceModeInstances) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "NONE":
		fallthrough
	case "SINGLE":
		*e = DeviceModeInstances(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceModeInstances: %v", v)
	}
}

// SupportedFeatures - Features that this Destination supports.
//
// Config API note: holds `browserUnbundling` fields.
type SupportedFeatures struct {
	// Whether this Destination supports browser unbundling.
	BrowserUnbundling *bool `json:"browserUnbundling,omitempty"`
	// Whether this Destination supports public browser unbundling.
	BrowserUnbundlingPublic *bool `json:"browserUnbundlingPublic,omitempty"`
	// This Destination's support level for cloud mode instances.
	// The values '0' and 'NONE', and '1' and 'SINGLE' are equivalent.
	CloudModeInstances *CloudModeInstances `json:"cloudModeInstances,omitempty"`
	// This Destination's support level for device mode instances.
	// Support for multiple device mode instances is currently not planned.
	// The values '0' and 'NONE', and '1' and 'SINGLE' are equivalent.
	DeviceModeInstances *DeviceModeInstances `json:"deviceModeInstances,omitempty"`
	// Whether this Destination supports replays.
	Replay *bool `json:"replay,omitempty"`
}

func (o *SupportedFeatures) GetBrowserUnbundling() *bool {
	if o == nil {
		return nil
	}
	return o.BrowserUnbundling
}

func (o *SupportedFeatures) GetBrowserUnbundlingPublic() *bool {
	if o == nil {
		return nil
	}
	return o.BrowserUnbundlingPublic
}

func (o *SupportedFeatures) GetCloudModeInstances() *CloudModeInstances {
	if o == nil {
		return nil
	}
	return o.CloudModeInstances
}

func (o *SupportedFeatures) GetDeviceModeInstances() *DeviceModeInstances {
	if o == nil {
		return nil
	}
	return o.DeviceModeInstances
}

func (o *SupportedFeatures) GetReplay() *bool {
	if o == nil {
		return nil
	}
	return o.Replay
}

// SupportedMethods - Methods that this Destination supports.
//
// Config API note: equal to `methods`.
type SupportedMethods struct {
	// Identifies if the Destination supports the `alias` method.
	Alias *bool `json:"alias,omitempty"`
	// Identifies if the Destination supports the `group` method.
	Group *bool `json:"group,omitempty"`
	// Identifies if the Destination supports the `identify` method.
	Identify *bool `json:"identify,omitempty"`
	// Identifies if the Destination supports the `pageview` method.
	Pageview *bool `json:"pageview,omitempty"`
	// Identifies if the Destination supports the `track` method.
	Track *bool `json:"track,omitempty"`
}

func (o *SupportedMethods) GetAlias() *bool {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *SupportedMethods) GetGroup() *bool {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *SupportedMethods) GetIdentify() *bool {
	if o == nil {
		return nil
	}
	return o.Identify
}

func (o *SupportedMethods) GetPageview() *bool {
	if o == nil {
		return nil
	}
	return o.Pageview
}

func (o *SupportedMethods) GetTrack() *bool {
	if o == nil {
		return nil
	}
	return o.Track
}

// SupportedPlatforms - Platforms from which the Destination receives events.
//
// Config API note: equal to `platforms`.
type SupportedPlatforms struct {
	// Whether this Destination supports browser events.
	Browser *bool `json:"browser,omitempty"`
	// Whether this Destination supports mobile events.
	Mobile *bool `json:"mobile,omitempty"`
	// Whether this Destination supports server events.
	Server *bool `json:"server,omitempty"`
}

func (o *SupportedPlatforms) GetBrowser() *bool {
	if o == nil {
		return nil
	}
	return o.Browser
}

func (o *SupportedPlatforms) GetMobile() *bool {
	if o == nil {
		return nil
	}
	return o.Mobile
}

func (o *SupportedPlatforms) GetServer() *bool {
	if o == nil {
		return nil
	}
	return o.Server
}

// DestinationMetadataV1 - Represents a Destination within Segment.
//
// A Destination is a target for Segment to forward data to, and represents a tool or storage Destination.
type DestinationMetadataV1 struct {
	// Actions available for the Destination.
	Actions []DestinationMetadataActionV1 `json:"actions"`
	// A list of categories with which the Destination is associated.
	Categories []string `json:"categories"`
	// A list of components this Destination provides.
	Components []DestinationMetadataComponentV1 `json:"components"`
	// Contact info for Integration Owners.
	Contacts []Contact `json:"contacts,omitempty"`
	// The description of the Destination.
	Description string `json:"description"`
	// The id of the Destination metadata.
	//
	// Config API note: analogous to `name`.
	ID string `json:"id"`
	// The Destination's logos.
	Logos Logos `json:"logos"`
	// The user-friendly name of the Destination.
	//
	// Config API note: equal to `displayName`.
	Name string `json:"name"`
	// Options configured for the Destination.
	Options []IntegrationOptionBeta `json:"options"`
	// Partner Owned flag.
	PartnerOwned *bool `json:"partnerOwned,omitempty"`
	// Predefined Destination subscriptions that can optionally be applied when connecting a new instance of the Destination.
	Presets []DestinationMetadataSubscriptionPresetV1 `json:"presets"`
	// A list of names previously used by the Destination.
	PreviousNames []string `json:"previousNames"`
	// The list of regional endpoints for this Destination.
	RegionEndpoints []string `json:"regionEndpoints,omitempty"`
	// The slug used to identify the Destination in the Segment app.
	Slug string `json:"slug"`
	// Support status of the Destination.
	Status DestinationMetadataV1Status `json:"status"`
	// Features that this Destination supports.
	//
	// Config API note: holds `browserUnbundling` fields.
	SupportedFeatures SupportedFeatures `json:"supportedFeatures"`
	// Methods that this Destination supports.
	//
	// Config API note: equal to `methods`.
	SupportedMethods SupportedMethods `json:"supportedMethods"`
	// Platforms from which the Destination receives events.
	//
	// Config API note: equal to `platforms`.
	SupportedPlatforms SupportedPlatforms `json:"supportedPlatforms"`
	// A list of supported regions for this Destination.
	SupportedRegions []string `json:"supportedRegions,omitempty"`
	// A website URL for this Destination.
	Website string `json:"website"`
}

func (o *DestinationMetadataV1) GetActions() []DestinationMetadataActionV1 {
	if o == nil {
		return []DestinationMetadataActionV1{}
	}
	return o.Actions
}

func (o *DestinationMetadataV1) GetCategories() []string {
	if o == nil {
		return []string{}
	}
	return o.Categories
}

func (o *DestinationMetadataV1) GetComponents() []DestinationMetadataComponentV1 {
	if o == nil {
		return []DestinationMetadataComponentV1{}
	}
	return o.Components
}

func (o *DestinationMetadataV1) GetContacts() []Contact {
	if o == nil {
		return nil
	}
	return o.Contacts
}

func (o *DestinationMetadataV1) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *DestinationMetadataV1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DestinationMetadataV1) GetLogos() Logos {
	if o == nil {
		return Logos{}
	}
	return o.Logos
}

func (o *DestinationMetadataV1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DestinationMetadataV1) GetOptions() []IntegrationOptionBeta {
	if o == nil {
		return []IntegrationOptionBeta{}
	}
	return o.Options
}

func (o *DestinationMetadataV1) GetPartnerOwned() *bool {
	if o == nil {
		return nil
	}
	return o.PartnerOwned
}

func (o *DestinationMetadataV1) GetPresets() []DestinationMetadataSubscriptionPresetV1 {
	if o == nil {
		return []DestinationMetadataSubscriptionPresetV1{}
	}
	return o.Presets
}

func (o *DestinationMetadataV1) GetPreviousNames() []string {
	if o == nil {
		return []string{}
	}
	return o.PreviousNames
}

func (o *DestinationMetadataV1) GetRegionEndpoints() []string {
	if o == nil {
		return nil
	}
	return o.RegionEndpoints
}

func (o *DestinationMetadataV1) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *DestinationMetadataV1) GetStatus() DestinationMetadataV1Status {
	if o == nil {
		return DestinationMetadataV1Status("")
	}
	return o.Status
}

func (o *DestinationMetadataV1) GetSupportedFeatures() SupportedFeatures {
	if o == nil {
		return SupportedFeatures{}
	}
	return o.SupportedFeatures
}

func (o *DestinationMetadataV1) GetSupportedMethods() SupportedMethods {
	if o == nil {
		return SupportedMethods{}
	}
	return o.SupportedMethods
}

func (o *DestinationMetadataV1) GetSupportedPlatforms() SupportedPlatforms {
	if o == nil {
		return SupportedPlatforms{}
	}
	return o.SupportedPlatforms
}

func (o *DestinationMetadataV1) GetSupportedRegions() []string {
	if o == nil {
		return nil
	}
	return o.SupportedRegions
}

func (o *DestinationMetadataV1) GetWebsite() string {
	if o == nil {
		return ""
	}
	return o.Website
}
