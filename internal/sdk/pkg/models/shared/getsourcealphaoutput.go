// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// GetSourceAlphaOutputSourceAlphaSourceMetadataV1LogosBeta - Represents a logo.
type GetSourceAlphaOutputSourceAlphaSourceMetadataV1LogosBeta struct {
	// The alternative text for this logo.
	Alt *string `json:"alt,omitempty"`
	// The default URL for this logo.
	Default string `json:"default"`
	// The logo mark.
	Mark *string `json:"mark,omitempty"`
}

func (o *GetSourceAlphaOutputSourceAlphaSourceMetadataV1LogosBeta) GetAlt() *string {
	if o == nil {
		return nil
	}
	return o.Alt
}

func (o *GetSourceAlphaOutputSourceAlphaSourceMetadataV1LogosBeta) GetDefault() string {
	if o == nil {
		return ""
	}
	return o.Default
}

func (o *GetSourceAlphaOutputSourceAlphaSourceMetadataV1LogosBeta) GetMark() *string {
	if o == nil {
		return nil
	}
	return o.Mark
}

// GetSourceAlphaOutputSourceAlphaSourceMetadataV1 - A website, server library, mobile SDK, or cloud application which can send data into Segment.
type GetSourceAlphaOutputSourceAlphaSourceMetadataV1 struct {
	// A list of categories this Source belongs to.
	Categories []string `json:"categories"`
	// The description of this Source.
	Description string `json:"description"`
	// The id for this Source metadata in the Segment catalog.
	//
	// Config API note: analogous to `name`.
	ID string `json:"id"`
	// True if this is a Cloud Event Source.
	IsCloudEventSource bool `json:"isCloudEventSource"`
	// The logos for this Source.
	Logos GetSourceAlphaOutputSourceAlphaSourceMetadataV1LogosBeta `json:"logos"`
	// The user-friendly name of this Source.
	//
	// Config API note: equal to `displayName`.
	Name string `json:"name"`
	// Options for this Source.
	Options []IntegrationOptionBeta `json:"options"`
	// The slug that identifies this Source in the Segment app.
	//
	// Config API note: equal to `name`.
	Slug string `json:"slug"`
}

func (o *GetSourceAlphaOutputSourceAlphaSourceMetadataV1) GetCategories() []string {
	if o == nil {
		return []string{}
	}
	return o.Categories
}

func (o *GetSourceAlphaOutputSourceAlphaSourceMetadataV1) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetSourceAlphaOutputSourceAlphaSourceMetadataV1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSourceAlphaOutputSourceAlphaSourceMetadataV1) GetIsCloudEventSource() bool {
	if o == nil {
		return false
	}
	return o.IsCloudEventSource
}

func (o *GetSourceAlphaOutputSourceAlphaSourceMetadataV1) GetLogos() GetSourceAlphaOutputSourceAlphaSourceMetadataV1LogosBeta {
	if o == nil {
		return GetSourceAlphaOutputSourceAlphaSourceMetadataV1LogosBeta{}
	}
	return o.Logos
}

func (o *GetSourceAlphaOutputSourceAlphaSourceMetadataV1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetSourceAlphaOutputSourceAlphaSourceMetadataV1) GetOptions() []IntegrationOptionBeta {
	if o == nil {
		return []IntegrationOptionBeta{}
	}
	return o.Options
}

func (o *GetSourceAlphaOutputSourceAlphaSourceMetadataV1) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

// GetSourceAlphaOutputSourceAlpha - Defines a data Source for Segment data.
type GetSourceAlphaOutputSourceAlpha struct {
	// Enable to receive data from the Source.
	Enabled bool `json:"enabled"`
	// The id of the Source.
	//
	// Config API note: analogous to `name`.
	ID string `json:"id"`
	// A list of labels applied to the Source.
	Labels []LabelV1 `json:"labels"`
	// The metadata for the Source.
	//
	// Config API note: includes `catalogName` and `catalogId`.
	Metadata GetSourceAlphaOutputSourceAlphaSourceMetadataV1 `json:"metadata"`
	// The name of the Source.
	//
	// Config API note: equal to `displayName`.
	Name *string `json:"name,omitempty"`
	// The settings associated with the Source.
	Settings map[string]interface{} `json:"settings,omitempty"`
	// The slug used to identify the Source in the Segment app.
	//
	// Config API note: equal to `name`.
	Slug string `json:"slug"`
	// The id of the Workspace that owns the Source.
	//
	// Config API note: equal to `parent`.
	WorkspaceID string `json:"workspaceId"`
	// The write keys used to send data from the Source. This field is left empty when the current token does not have the
	// 'source admin' permission.
	WriteKeys []string `json:"writeKeys"`
}

func (o *GetSourceAlphaOutputSourceAlpha) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *GetSourceAlphaOutputSourceAlpha) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSourceAlphaOutputSourceAlpha) GetLabels() []LabelV1 {
	if o == nil {
		return []LabelV1{}
	}
	return o.Labels
}

func (o *GetSourceAlphaOutputSourceAlpha) GetMetadata() GetSourceAlphaOutputSourceAlphaSourceMetadataV1 {
	if o == nil {
		return GetSourceAlphaOutputSourceAlphaSourceMetadataV1{}
	}
	return o.Metadata
}

func (o *GetSourceAlphaOutputSourceAlpha) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetSourceAlphaOutputSourceAlpha) GetSettings() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Settings
}

func (o *GetSourceAlphaOutputSourceAlpha) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetSourceAlphaOutputSourceAlpha) GetWorkspaceID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceID
}

func (o *GetSourceAlphaOutputSourceAlpha) GetWriteKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.WriteKeys
}

// GetSourceAlphaOutput - Returns a Source.
type GetSourceAlphaOutput struct {
	// The returned Source object.
	Source GetSourceAlphaOutputSourceAlpha `json:"source"`
}

func (o *GetSourceAlphaOutput) GetSource() GetSourceAlphaOutputSourceAlpha {
	if o == nil {
		return GetSourceAlphaOutputSourceAlpha{}
	}
	return o.Source
}
