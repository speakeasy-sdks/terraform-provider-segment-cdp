// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ScheduleStrategy - Determines the strategy used for triggering syncs, which will be used in
// conjunction with scheduleConfig.
type ScheduleStrategy string

const (
	ScheduleStrategyManual       ScheduleStrategy = "MANUAL"
	ScheduleStrategyPeriodic     ScheduleStrategy = "PERIODIC"
	ScheduleStrategySpecificDays ScheduleStrategy = "SPECIFIC_DAYS"
)

func (e ScheduleStrategy) ToPointer() *ScheduleStrategy {
	return &e
}

func (e *ScheduleStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MANUAL":
		fallthrough
	case "PERIODIC":
		fallthrough
	case "SPECIFIC_DAYS":
		*e = ScheduleStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduleStrategy: %v", v)
	}
}

// CreateReverseEtlModelInput - Defines how to create a new Model.
type CreateReverseEtlModelInput struct {
	// A longer, more descriptive explanation of the Model.
	Description string `json:"description"`
	// Indicates whether the Model should have syncs enabled. When disabled, no
	// syncs will be triggered, regardless of the enabled status of the attached
	// destinations/subscriptions.
	Enabled bool `json:"enabled"`
	// A short, human-readable description of the Model.
	Name string `json:"name"`
	// The SQL query that will be executed to extract data from the connected
	// Source.
	Query string `json:"query"`
	// Indicates the column named in `query` that should be used to uniquely
	// identify the extracted records.
	QueryIdentifierColumn string `json:"queryIdentifierColumn"`
	// Depending on the chosen strategy, configures the schedule for this model.
	ScheduleConfig map[string]interface{} `json:"scheduleConfig"`
	// Determines the strategy used for triggering syncs, which will be used in
	// conjunction with scheduleConfig.
	ScheduleStrategy ScheduleStrategy `json:"scheduleStrategy"`
	// Indicates which Source to attach this model to.
	SourceID string `json:"sourceId"`
}

func (o *CreateReverseEtlModelInput) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreateReverseEtlModelInput) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *CreateReverseEtlModelInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateReverseEtlModelInput) GetQuery() string {
	if o == nil {
		return ""
	}
	return o.Query
}

func (o *CreateReverseEtlModelInput) GetQueryIdentifierColumn() string {
	if o == nil {
		return ""
	}
	return o.QueryIdentifierColumn
}

func (o *CreateReverseEtlModelInput) GetScheduleConfig() map[string]interface{} {
	if o == nil {
		return map[string]interface{}{}
	}
	return o.ScheduleConfig
}

func (o *CreateReverseEtlModelInput) GetScheduleStrategy() ScheduleStrategy {
	if o == nil {
		return ScheduleStrategy("")
	}
	return o.ScheduleStrategy
}

func (o *CreateReverseEtlModelInput) GetSourceID() string {
	if o == nil {
		return ""
	}
	return o.SourceID
}
