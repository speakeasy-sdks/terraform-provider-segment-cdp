// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MessagesSubscriptionRequestStatus - The user subscribed, unsubscribed, or on initial status globally.
type MessagesSubscriptionRequestStatus string

const (
	MessagesSubscriptionRequestStatusDidNotSubscribe MessagesSubscriptionRequestStatus = "DID_NOT_SUBSCRIBE"
	MessagesSubscriptionRequestStatusSubscribed      MessagesSubscriptionRequestStatus = "SUBSCRIBED"
	MessagesSubscriptionRequestStatusUnsubscribed    MessagesSubscriptionRequestStatus = "UNSUBSCRIBED"
)

func (e MessagesSubscriptionRequestStatus) ToPointer() *MessagesSubscriptionRequestStatus {
	return &e
}

func (e *MessagesSubscriptionRequestStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DID_NOT_SUBSCRIBE":
		fallthrough
	case "SUBSCRIBED":
		fallthrough
	case "UNSUBSCRIBED":
		*e = MessagesSubscriptionRequestStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessagesSubscriptionRequestStatus: %v", v)
	}
}

// MessagesSubscriptionRequestType - Type is communication medium used.
type MessagesSubscriptionRequestType string

const (
	MessagesSubscriptionRequestTypeAndroidPush MessagesSubscriptionRequestType = "ANDROID_PUSH"
	MessagesSubscriptionRequestTypeEmail       MessagesSubscriptionRequestType = "EMAIL"
	MessagesSubscriptionRequestTypeIosPush     MessagesSubscriptionRequestType = "IOS_PUSH"
	MessagesSubscriptionRequestTypeSms         MessagesSubscriptionRequestType = "SMS"
	MessagesSubscriptionRequestTypeWhatsapp    MessagesSubscriptionRequestType = "WHATSAPP"
)

func (e MessagesSubscriptionRequestType) ToPointer() *MessagesSubscriptionRequestType {
	return &e
}

func (e *MessagesSubscriptionRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ANDROID_PUSH":
		fallthrough
	case "EMAIL":
		fallthrough
	case "IOS_PUSH":
		fallthrough
	case "SMS":
		fallthrough
	case "WHATSAPP":
		*e = MessagesSubscriptionRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessagesSubscriptionRequestType: %v", v)
	}
}

type MessagesSubscriptionRequest struct {
	// Optional groups subscription status.
	Groups []GroupSubscriptionStatus `json:"groups,omitempty"`
	// Key is the phone number or email.
	Key string `json:"key"`
	// The user subscribed, unsubscribed, or on initial status globally.
	Status *MessagesSubscriptionRequestStatus `json:"status,omitempty"`
	// Type is communication medium used.
	Type MessagesSubscriptionRequestType `json:"type"`
}
