// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Type - The Tracking Plan's type.
type Type string

const (
	TypeEngage          Type = "ENGAGE"
	TypeLive            Type = "LIVE"
	TypePropertyLibrary Type = "PROPERTY_LIBRARY"
	TypeRuleLibrary     Type = "RULE_LIBRARY"
	TypeTemplate        Type = "TEMPLATE"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENGAGE":
		fallthrough
	case "LIVE":
		fallthrough
	case "PROPERTY_LIBRARY":
		fallthrough
	case "RULE_LIBRARY":
		fallthrough
	case "TEMPLATE":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// CreateTrackingPlanV1Input - Creates a Tracking Plan in the Workspace.
type CreateTrackingPlanV1Input struct {
	// The Tracking Plan's description.
	Description *string `json:"description,omitempty"`
	// The Tracking Plan's name.
	//
	// Config API note: equal to `displayName`.
	Name string `json:"name"`
	// The Tracking Plan's type.
	Type Type `json:"type"`
}

func (o *CreateTrackingPlanV1Input) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateTrackingPlanV1Input) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateTrackingPlanV1Input) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}
