// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ResourceV1Type - The kind of resource this permission applies to.
type ResourceV1Type string

const (
	ResourceV1TypeFunction  ResourceV1Type = "FUNCTION"
	ResourceV1TypeSource    ResourceV1Type = "SOURCE"
	ResourceV1TypeSpace     ResourceV1Type = "SPACE"
	ResourceV1TypeWarehouse ResourceV1Type = "WAREHOUSE"
	ResourceV1TypeWorkspace ResourceV1Type = "WORKSPACE"
)

func (e ResourceV1Type) ToPointer() *ResourceV1Type {
	return &e
}

func (e *ResourceV1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FUNCTION":
		fallthrough
	case "SOURCE":
		fallthrough
	case "SPACE":
		fallthrough
	case "WAREHOUSE":
		fallthrough
	case "WORKSPACE":
		*e = ResourceV1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceV1Type: %v", v)
	}
}

// ResourceV1 - Represents a permission's resource.
type ResourceV1 struct {
	// The id of this resource.
	ID string `json:"id"`
	// The kind of resource this permission applies to.
	Type ResourceV1Type `json:"type"`
}

func (o *ResourceV1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResourceV1) GetType() ResourceV1Type {
	if o == nil {
		return ResourceV1Type("")
	}
	return o.Type
}
